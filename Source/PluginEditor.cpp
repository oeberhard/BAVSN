/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
NewProjectAudioProcessorEditor::NewProjectAudioProcessorEditor (NewProjectAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    // This is where our plugin's editor size is set.
    setSize (800, 800);

	sequencer = new SequencerWindow(32, 10);
	slider = new Slider("slider");
	slider->setBounds(10, 300, 50, 30);
	slider->setSliderStyle(Slider::RotaryVerticalDrag);
	slider->setTextBoxStyle(Slider::NoTextBox, true, 0, 0);
	slider->setColour(Slider::rotarySliderFillColourId, Colour(0, (uint8)150, 0));
	slider->setChangeNotificationOnlyOnRelease(true);
	slider->addListener(this);

	backgroundGain = new Slider("backgroundGain");
	backgroundGain->setBounds(70, 300, 50, 30);
	backgroundGain->setSliderStyle(Slider::RotaryVerticalDrag);
	backgroundGain->setTextBoxStyle(Slider::NoTextBox, true, 0, 0);
	backgroundGain->setColour(Slider::rotarySliderFillColourId, Colour(0, (uint8)150, 0));
	backgroundGain->setChangeNotificationOnlyOnRelease(true);
	backgroundGain->addListener(this);
	addAndMakeVisible(backgroundGain);

	buttonAnalyse = new TextButton("Analyze new wave");
	buttonLoad = new TextButton("Load existing data");
	buttonBackgroundSound = new ToggleButton("Play whole signal");
	buttonAnalyse->setBounds(0, 750, 150, 40);
	buttonLoad->setBounds(150, 750, 150, 40);
	buttonBackgroundSound->setBounds(300,750,150,40);
	buttonAnalyse->addListener(this);
	buttonLoad->addListener(this);
	buttonBackgroundSound->addListener(this);
	buttonAnalyse->setColour(TextButton::buttonColourId , Colour(0, (uint8)150, 0));
	buttonLoad->setColour(TextButton::buttonColourId , Colour(0, (uint8)150, 0));
	buttonBackgroundSound->setColour(ToggleButton::textColourId, Colour(0, (uint8)150, 0));
	buttonBackgroundSound->setToggleState(true, false);
	addAndMakeVisible(buttonBackgroundSound);
	
	addAndMakeVisible(buttonAnalyse);
	addAndMakeVisible(buttonLoad);


	spectrumFromNotes = new ImageComponent("spec");
	spectrumFromNotes->setBounds(600, 0, 180, 800);
	addAndMakeVisible(spectrumFromNotes);

	impulsDistFromNotes = new ImageComponent("imp");
	impulsDistFromNotes->setBounds(0, 320, 400, 300);
	addAndMakeVisible(impulsDistFromNotes);

	kernelDistributionImage = new ImageComponent("ker");
	kernelDistributionImage->setBounds(0, 620, 512, 100);
	addAndMakeVisible(kernelDistributionImage);


	audioProcessor = ownerFilter;
	audioProcessor->newNotesFromAnalyser->addActionListener(this);

	notesAreSetUp = false;
	addAndMakeVisible(slider);
	buttonsExpired = false;

}

NewProjectAudioProcessorEditor::~NewProjectAudioProcessorEditor()
{
	audioProcessor->newNotesFromAnalyser->removeActionListener(this);

}

void NewProjectAudioProcessorEditor::sliderValueChanged (Slider* slider2){

	if(slider2 == slider){
		double value = slider->getValue();
		audioProcessor->noteThresholdChanged(0.00001 * 10 *value + 0.00001, 3);
	}

	if(slider2 == backgroundGain){
		double value = backgroundGain->getValue();
		audioProcessor->soundEditor->backgroundGain = value / 30;
		audioProcessor->soundEditor->notesChanged = true;
	}

}

void NewProjectAudioProcessorEditor::actionListenerCallback	(const String &message){

	if(message == "N"){
		if(!notesAreSetUp){

			Editor* sE = (dynamic_cast<NewProjectAudioProcessor*>(getAudioProcessor()))->soundEditor;

			int numberOfSemitones = 32;
			float heightOfSemitone = sequencer->getHeight() / numberOfSemitones;
			float lengthOfSample = sequencer->getWidth() / (float)sE->numberOfSpectralSamples;

			sequencer = new SequencerWindow(numberOfSemitones, 10);
			addAndMakeVisible(sequencer);



			for(int i = 0; i < sE->notes.size(); i++){
				GraphicNote* gN = new GraphicNote(heightOfSemitone, sE->notes[i]->noteNumber, audioProcessor);
				gN->setTopLeftPosition(sE->notes[i]->timeCoordinateStart * lengthOfSample ,32 * heightOfSemitone - sE->notes[i]->frequencyCoordinate * heightOfSemitone);
				gN->setSize((sE->notes[i]->timeCoordinateEnd - sE->notes[i]->timeCoordinateStart) * lengthOfSample, heightOfSemitone);
				graphicNotes.add(gN);
				sequencer->addAndMakeVisible(gN);
			}

			imageKD = drawKernelDistribution();
			kernelDistributionImage->setImage(*imageKD);
			kernelDistributionImage->repaint();

			notesAreSetUp = true;
		}
	//if(imageKD =0){

	//}

	}
	if(message == "T"){

		sequencer->deleteAllChildren();

		Editor* sE = (dynamic_cast<NewProjectAudioProcessor*>(getAudioProcessor()))->soundEditor;

		int numberOfSemitones = 32;
		float heightOfSemitone = sequencer->getHeight() / numberOfSemitones;
		float lengthOfSample = sequencer->getWidth() / (float)sE->numberOfSpectralSamples;

		//sequencer = new SequencerWindow(numberOfSemitones, 10);
		//addAndMakeVisible(sequencer);

		for(int i = 0; i < sE->notes.size(); i++){
			GraphicNote* gN = new GraphicNote(heightOfSemitone, sE->notes[i]->noteNumber, audioProcessor);
			gN->setTopLeftPosition(sE->notes[i]->timeCoordinateStart * lengthOfSample ,32 * heightOfSemitone - sE->notes[i]->frequencyCoordinate * heightOfSemitone);
			gN->setSize((sE->notes[i]->timeCoordinateEnd - sE->notes[i]->timeCoordinateStart) * lengthOfSample, heightOfSemitone);
			graphicNotes.add(gN);
			sequencer->addAndMakeVisible(gN);
		}

		notesAreSetUp = true;
	}
	if(message == "G"){

		spectrumFromNotes->setImage(*audioProcessor->soundEditor->imageSpectogramFromNotes);
		spectrumFromNotes->repaint();
		impulsDistFromNotes->setImage(*audioProcessor->soundEditor->imageImpulseDistFromNotes);
		impulsDistFromNotes->repaint();
	}

}

//==============================================================================
void NewProjectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::black);
    g.setColour (Colours::black);
    //g.setFont (15.0f);
    //g.drawFittedText ("Hello World!",
      //                0, 0, getWidth(), getHeight(),
        //              Justification::centred, 1);
}

Image* NewProjectAudioProcessorEditor::drawKernelDistribution(){

	float* kernelDist = audioProcessor->soundEditor->arrayOfComponents[0].kernelDistribution;
	int numberOfKernelFreq = audioProcessor->soundEditor->nS->numberOfKernelFrequencies;

	float highestValue = 0;

	for(int k = 1; k < numberOfKernelFreq; k++)
		if(kernelDist[k] > highestValue)
			highestValue = kernelDist[k];
	
	float gainFactor = 1 / highestValue;

	Image* image = new Image(Image::PixelFormat::RGB, 1024, 200, true);

	for(int k = 1; k < numberOfKernelFreq; k++){
		int height = kernelDist[k] * gainFactor * 200;
		for(int p = 0; p < height; p++)
			image->setPixelAt(k, 199-p, Colour(0, (uint8)100, 0));
	}

	return image;

}

void NewProjectAudioProcessorEditor::buttonClicked (Button* button)
{
	if(!buttonsExpired){
		if(button == buttonAnalyse){
			audioProcessor->analyseNewFile = true;
			buttonAnalyse->setColour(TextButton::buttonColourId , Colour((uint8)50, (uint8)50, (uint8)50));
			buttonLoad->setColour(TextButton::buttonColourId , Colour((uint8)50, (uint8)50, (uint8)50));
			buttonsExpired = true;
		}
		if(button == buttonLoad){
			audioProcessor->loadExistingData();
			buttonAnalyse->setColour(TextButton::buttonColourId , Colour((uint8)50, (uint8)50, (uint8)50));
			buttonLoad->setColour(TextButton::buttonColourId , Colour((uint8)50, (uint8)50, (uint8)50));
			buttonsExpired = true;
		}
	}
	if(button == buttonBackgroundSound){
		if(button->getToggleState() == true){
			audioProcessor->soundEditor->backgroundSoundIsActive = true;
			audioProcessor->soundEditor->notesChanged = true;
		}
		else{
			audioProcessor->soundEditor->backgroundSoundIsActive = false;
			audioProcessor->soundEditor->notesChanged = true;
		}
	}
}
